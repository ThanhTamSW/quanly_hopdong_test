// seed.js - Script t·∫°o d·ªØ li·ªáu m·∫´u
const mongoose = require('mongoose');
const User = require('./src/models/User');
const Partner = require('./src/models/Partner');
const Contract = require('./src/models/Contract');
const Trainer = require('./src/models/Trainer');
const Schedule = require('./src/models/Schedule');
require('dotenv').config();

const seedData = async () => {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB\n');

    // X√≥a d·ªØ li·ªáu c≈©
    console.log('üóëÔ∏è  ƒêang x√≥a d·ªØ li·ªáu c≈©...');
    await User.deleteMany({});
    await Partner.deleteMany({});
    await Contract.deleteMany({});
    await Trainer.deleteMany({});
    await Schedule.deleteMany({});
    console.log('‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈©\n');

    // ==================== T·∫†O USERS ====================
    console.log('üë• ƒêang t·∫°o users...');
    
    const admin = await User.create({
      email: 'admin@example.com',
      password: '123456',
      fullName: 'Nguy·ªÖn VƒÉn Admin',
      role: 'admin',
      phone: '0123456789',
      department: 'Qu·∫£n tr·ªã',
      position: 'Gi√°m ƒë·ªëc',
      status: 'active'
    });

    const manager = await User.create({
      email: 'manager@example.com',
      password: '123456',
      fullName: 'Tr·∫ßn Th·ªã Manager',
      role: 'manager',
      phone: '0987654321',
      department: 'Kinh doanh',
      position: 'Tr∆∞·ªüng ph√≤ng',
      status: 'active'
    });

    const user = await User.create({
      email: 'user@example.com',
      password: '123456',
      fullName: 'L√™ VƒÉn User',
      role: 'user',
      phone: '0976543210',
      department: 'H√†nh ch√≠nh',
      position: 'Nh√¢n vi√™n',
      status: 'active'
    });

    console.log('‚úÖ ƒê√£ t·∫°o 3 users\n');

    // ==================== T·∫†O PARTNERS ====================
    console.log('ü§ù ƒêang t·∫°o partners...');

    const partners = await Partner.insertMany([
      {
        code: 'PT00001',
        name: 'C√¥ng ty TNHH C√¥ng ngh·ªá ABC',
        type: 'client',
        contactPerson: 'Nguy·ªÖn VƒÉn A',
        email: 'contact@abc.com',
        phone: '0281234567',
        address: {
          street: '123 ƒê∆∞·ªùng L√™ L·ª£i',
          city: 'H·ªì Ch√≠ Minh',
          district: 'Qu·∫≠n 1',
          ward: 'Ph∆∞·ªùng B·∫øn Ngh√©',
          country: 'Vietnam'
        },
        taxCode: '0123456789',
        bankInfo: {
          bankName: 'Vietcombank',
          accountNumber: '0123456789',
          accountName: 'CONG TY TNHH CONG NGHE ABC',
          branch: 'Chi nh√°nh TP.HCM'
        },
        website: 'https://abc.com',
        industry: 'C√¥ng ngh·ªá th√¥ng tin',
        status: 'active',
        rating: 5,
        createdBy: admin._id
      },
      {
        code: 'PT00002',
        name: 'C√¥ng ty CP Thi·∫øt b·ªã XYZ',
        type: 'supplier',
        contactPerson: 'Tr·∫ßn Th·ªã B',
        email: 'info@xyz.com',
        phone: '0287654321',
        address: {
          street: '456 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá',
          city: 'H·ªì Ch√≠ Minh',
          district: 'Qu·∫≠n 1',
          ward: 'Ph∆∞·ªùng B·∫øn Th√†nh',
          country: 'Vietnam'
        },
        taxCode: '9876543210',
        website: 'https://xyz.com',
        industry: 'Th∆∞∆°ng m·∫°i',
        status: 'active',
        rating: 4,
        createdBy: admin._id
      },
      {
        code: 'PT00003',
        name: 'C√¥ng ty TNHH T∆∞ v·∫•n DEF',
        type: 'partner',
        contactPerson: 'L√™ VƒÉn C',
        email: 'contact@def.com',
        phone: '0283456789',
        address: {
          street: '789 ƒê∆∞·ªùng V√µ VƒÉn T·∫ßn',
          city: 'H·ªì Ch√≠ Minh',
          district: 'Qu·∫≠n 3',
          ward: 'Ph∆∞·ªùng V√µ Th·ªã S√°u',
          country: 'Vietnam'
        },
        taxCode: '5555666677',
        website: 'https://def.com',
        industry: 'T∆∞ v·∫•n',
        status: 'active',
        rating: 5,
        createdBy: manager._id
      },
      {
        code: 'PT00004',
        name: 'C√¥ng ty CP Logistics GHI',
        type: 'supplier',
        contactPerson: 'Ph·∫°m Th·ªã D',
        email: 'support@ghi.com',
        phone: '0289876543',
        address: {
          street: '321 ƒê∆∞·ªùng ƒêi·ªán Bi√™n Ph·ªß',
          city: 'H·ªì Ch√≠ Minh',
          district: 'Qu·∫≠n B√¨nh Th·∫°nh',
          country: 'Vietnam'
        },
        taxCode: '7777888899',
        industry: 'Logistics',
        status: 'active',
        rating: 4,
        createdBy: manager._id
      },
      {
        code: 'PT00005',
        name: 'C√¥ng ty TNHH X√¢y d·ª±ng JKL',
        type: 'client',
        contactPerson: 'Ho√†ng VƒÉn E',
        email: 'info@jkl.com',
        phone: '0285432109',
        address: {
          street: '654 ƒê∆∞·ªùng C√°ch M·∫°ng Th√°ng 8',
          city: 'H·ªì Ch√≠ Minh',
          district: 'Qu·∫≠n 10',
          country: 'Vietnam'
        },
        taxCode: '1111222233',
        industry: 'X√¢y d·ª±ng',
        status: 'active',
        rating: 3,
        createdBy: user._id
      }
    ]);

    console.log('‚úÖ ƒê√£ t·∫°o 5 partners\n');

    // ==================== T·∫†O CONTRACTS ====================
    console.log('üìÑ ƒêang t·∫°o contracts...');

    const today = new Date();
    const oneMonthAgo = new Date(today);
    oneMonthAgo.setMonth(today.getMonth() - 1);
    const twoMonthsAgo = new Date(today);
    twoMonthsAgo.setMonth(today.getMonth() - 2);
    const sixMonthsLater = new Date(today);
    sixMonthsLater.setMonth(today.getMonth() + 6);
    const oneYearLater = new Date(today);
    oneYearLater.setFullYear(today.getFullYear() + 1);
    const twentyDaysLater = new Date(today);
    twentyDaysLater.setDate(today.getDate() + 20);

    const contracts = await Contract.insertMany([
      {
        contractNumber: 'HD202500001',
        title: 'H·ª£p ƒë·ªìng cung c·∫•p ph·∫ßn m·ªÅm qu·∫£n l√Ω',
        description: 'Cung c·∫•p v√† tri·ªÉn khai h·ªá th·ªëng qu·∫£n l√Ω doanh nghi·ªáp',
        partner: partners[0]._id,
        type: 'service',
        value: 500000000,
        currency: 'VND',
        signDate: twoMonthsAgo,
        startDate: twoMonthsAgo,
        endDate: oneYearLater,
        status: 'active',
        priority: 'high',
        paymentTerms: 'Thanh to√°n 3 ƒë·ª£t: 30% - 40% - 30%',
        paymentMethod: 'bank_transfer',
        signatories: [
          {
            name: 'Nguy·ªÖn VƒÉn Admin',
            position: 'Gi√°m ƒë·ªëc',
            organization: 'C√¥ng ty ch√∫ng t√¥i'
          },
          {
            name: 'Nguy·ªÖn VƒÉn A',
            position: 'Gi√°m ƒë·ªëc',
            organization: 'C√¥ng ty TNHH C√¥ng ngh·ªá ABC'
          }
        ],
        tags: ['ph·∫ßn m·ªÅm', 'IT', '∆∞u ti√™n cao'],
        notes: 'H·ª£p ƒë·ªìng quan tr·ªçng, c·∫ßn theo d√µi ti·∫øn ƒë·ªô',
        createdBy: admin._id,
        history: [{
          action: 'created',
          description: 'H·ª£p ƒë·ªìng ƒë∆∞·ª£c t·∫°o',
          changedBy: admin._id
        }]
      },
      {
        contractNumber: 'HD202500002',
        title: 'H·ª£p ƒë·ªìng mua thi·∫øt b·ªã vƒÉn ph√≤ng',
        description: 'Mua 50 m√°y t√≠nh, m√°y in v√† ph·ª• ki·ªán',
        partner: partners[1]._id,
        type: 'purchase',
        value: 300000000,
        currency: 'VND',
        signDate: oneMonthAgo,
        startDate: oneMonthAgo,
        endDate: today,
        status: 'completed',
        priority: 'medium',
        paymentTerms: 'Thanh to√°n ngay khi giao h√†ng',
        paymentMethod: 'bank_transfer',
        tags: ['thi·∫øt b·ªã', 'vƒÉn ph√≤ng'],
        notes: 'ƒê√£ ho√†n th√†nh v√† nghi·ªám thu',
        createdBy: manager._id,
        history: [
          {
            action: 'created',
            description: 'H·ª£p ƒë·ªìng ƒë∆∞·ª£c t·∫°o',
            changedBy: manager._id
          },
          {
            action: 'status_changed',
            description: 'Chuy·ªÉn tr·∫°ng th√°i sang Completed',
            changedBy: manager._id
          }
        ]
      },
      {
        contractNumber: 'HD202500003',
        title: 'H·ª£p ƒë·ªìng t∆∞ v·∫•n chi·∫øn l∆∞·ª£c kinh doanh',
        description: 'T∆∞ v·∫•n v√† x√¢y d·ª±ng k·∫ø ho·∫°ch kinh doanh 2025',
        partner: partners[2]._id,
        type: 'service',
        value: 150000000,
        currency: 'VND',
        signDate: today,
        startDate: today,
        endDate: twentyDaysLater,
        status: 'active',
        priority: 'urgent',
        paymentTerms: 'Thanh to√°n 2 ƒë·ª£t: 50% - 50%',
        paymentMethod: 'bank_transfer',
        tags: ['t∆∞ v·∫•n', 's·∫Øp h·∫øt h·∫°n'],
        notes: 'H·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n, c·∫ßn ch√∫ √Ω',
        createdBy: admin._id,
        history: [{
          action: 'created',
          description: 'H·ª£p ƒë·ªìng ƒë∆∞·ª£c t·∫°o',
          changedBy: admin._id
        }]
      },
      {
        contractNumber: 'HD202500004',
        title: 'H·ª£p ƒë·ªìng v·∫≠n chuy·ªÉn h√†ng h√≥a',
        description: 'D·ªãch v·ª• v·∫≠n chuy·ªÉn h√†ng h√≥a n·ªôi ƒë·ªãa',
        partner: partners[3]._id,
        type: 'service',
        value: 80000000,
        currency: 'VND',
        signDate: today,
        startDate: today,
        endDate: sixMonthsLater,
        status: 'active',
        priority: 'low',
        paymentTerms: 'Thanh to√°n h√†ng th√°ng',
        paymentMethod: 'bank_transfer',
        tags: ['logistics', 'd√†i h·∫°n'],
        createdBy: manager._id,
        history: [{
          action: 'created',
          description: 'H·ª£p ƒë·ªìng ƒë∆∞·ª£c t·∫°o',
          changedBy: manager._id
        }]
      },
      {
        contractNumber: 'HD202500005',
        title: 'H·ª£p ƒë·ªìng x√¢y d·ª±ng vƒÉn ph√≤ng m·ªõi',
        description: 'X√¢y d·ª±ng v√† ho√†n thi·ªán vƒÉn ph√≤ng chi nh√°nh',
        partner: partners[4]._id,
        type: 'lease',
        value: 2000000000,
        currency: 'VND',
        signDate: today,
        startDate: today,
        endDate: oneYearLater,
        status: 'pending',
        priority: 'high',
        paymentTerms: 'Thanh to√°n theo ti·∫øn ƒë·ªô',
        paymentMethod: 'installment',
        tags: ['x√¢y d·ª±ng', 'd·ª± √°n l·ªõn'],
        notes: 'D·ª± √°n tr·ªçng ƒëi·ªÉm nƒÉm 2025',
        createdBy: admin._id,
        history: [{
          action: 'created',
          description: 'H·ª£p ƒë·ªìng ƒë∆∞·ª£c t·∫°o',
          changedBy: admin._id
        }]
      },
      {
        contractNumber: 'HD202500006',
        title: 'H·ª£p ƒë·ªìng b·∫£o tr√¨ h·ªá th·ªëng',
        description: 'B·∫£o tr√¨ v√† n√¢ng c·∫•p h·ªá th·ªëng IT',
        partner: partners[0]._id,
        type: 'service',
        value: 120000000,
        currency: 'VND',
        signDate: oneMonthAgo,
        startDate: oneMonthAgo,
        endDate: oneYearLater,
        status: 'active',
        priority: 'medium',
        paymentTerms: 'Thanh to√°n h√†ng qu√Ω',
        paymentMethod: 'bank_transfer',
        tags: ['b·∫£o tr√¨', 'IT'],
        createdBy: user._id,
        history: [{
          action: 'created',
          description: 'H·ª£p ƒë·ªìng ƒë∆∞·ª£c t·∫°o',
          changedBy: user._id
        }]
      }
    ]);

    console.log('‚úÖ ƒê√£ t·∫°o 6 contracts\n');

    // ==================== T·∫†O TRAINERS ====================
    console.log('üèãÔ∏è ƒêang t·∫°o trainers...');

    const trainer1 = await Trainer.create({
      user: user._id,
      code: 'TR0001',
      specialties: ['Yoga', 'Pilates', 'Meditation'],
      hourlyRate: 200000,
      experience: 3,
      bio: 'Hu·∫•n luy·ªán vi√™n Yoga chuy√™n nghi·ªáp v·ªõi 3 nƒÉm kinh nghi·ªám',
      languages: ['Vietnamese', 'English'],
      certifications: [{
        name: 'Yoga Alliance RYT 200',
        issuer: 'Yoga Alliance',
        issueDate: new Date('2022-01-15')
      }],
      workingHours: {
        monday: { start: '06:00', end: '20:00', available: true },
        tuesday: { start: '06:00', end: '20:00', available: true },
        wednesday: { start: '06:00', end: '20:00', available: true },
        thursday: { start: '06:00', end: '20:00', available: true },
        friday: { start: '06:00', end: '20:00', available: true },
        saturday: { start: '08:00', end: '18:00', available: true },
        sunday: { available: false }
      },
      status: 'active'
    });

    const trainer2 = await Trainer.create({
      user: manager._id,
      code: 'TR0002',
      specialties: ['Gym', 'Personal Training', 'Boxing'],
      hourlyRate: 250000,
      experience: 5,
      bio: 'HLV gym v√† boxing v·ªõi 5 nƒÉm kinh nghi·ªám t·∫°i c√°c ph√≤ng gym h√†ng ƒë·∫ßu',
      languages: ['Vietnamese'],
      certifications: [{
        name: 'Certified Personal Trainer',
        issuer: 'NASM',
        issueDate: new Date('2020-06-01')
      }],
      workingHours: {
        monday: { start: '07:00', end: '21:00', available: true },
        tuesday: { start: '07:00', end: '21:00', available: true },
        wednesday: { start: '07:00', end: '21:00', available: true },
        thursday: { start: '07:00', end: '21:00', available: true },
        friday: { start: '07:00', end: '21:00', available: true },
        saturday: { start: '09:00', end: '17:00', available: true },
        sunday: { start: '09:00', end: '13:00', available: true }
      },
      status: 'active'
    });

    console.log('‚úÖ ƒê√£ t·∫°o 2 trainers\n');

    // ==================== T·∫†O SCHEDULES ====================
    console.log('üìÖ ƒêang t·∫°o schedules...');

    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);
    const dayAfterTomorrow = new Date(today);
    dayAfterTomorrow.setDate(today.getDate() + 2);

    // L·ªãch h√¥m nay
    const schedule1 = await Schedule.create({
      scheduleCode: await Schedule.generateCode(),
      trainer: trainer1._id,
      title: 'L·ªõp Yoga bu·ªïi s√°ng',
      subject: 'Yoga',
      date: today,
      startTime: '08:00',
      endTime: '09:30',
      location: 'Ph√≤ng Yoga 1',
      maxStudents: 20,
      description: 'L·ªõp Yoga c∆° b·∫£n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
      students: [
        { name: 'Nguy·ªÖn Th·ªã A', email: 'a@example.com', phone: '0901111111' },
        { name: 'Tr·∫ßn VƒÉn B', email: 'b@example.com', phone: '0902222222' }
      ],
      status: 'scheduled',
      createdBy: admin._id
    });

    const schedule2 = await Schedule.create({
      scheduleCode: await Schedule.generateCode(),
      trainer: trainer1._id,
      title: 'L·ªõp Yoga bu·ªïi chi·ªÅu',
      subject: 'Yoga',
      date: today,
      startTime: '17:00',
      endTime: '18:30',
      location: 'Ph√≤ng Yoga 1',
      maxStudents: 20,
      description: 'L·ªõp Yoga n√¢ng cao',
      status: 'scheduled',
      createdBy: admin._id
    });

    const schedule3 = await Schedule.create({
      scheduleCode: await Schedule.generateCode(),
      trainer: trainer2._id,
      title: 'L·ªõp Gym bu·ªïi s√°ng',
      subject: 'Gym',
      date: today,
      startTime: '07:00',
      endTime: '08:00',
      location: 'Khu Gym t·∫ßng 2',
      maxStudents: 15,
      description: 'Luy·ªán t·∫≠p gym c∆° b·∫£n',
      students: [
        { name: 'L√™ VƒÉn C', email: 'c@example.com', phone: '0903333333' }
      ],
      status: 'scheduled',
      createdBy: admin._id
    });

    // L·ªãch ng√†y mai
    await Schedule.create({
      scheduleCode: await Schedule.generateCode(),
      trainer: trainer1._id,
      title: 'L·ªõp Yoga bu·ªïi s√°ng',
      subject: 'Yoga',
      date: tomorrow,
      startTime: '08:00',
      endTime: '09:30',
      location: 'Ph√≤ng Yoga 1',
      maxStudents: 20,
      status: 'scheduled',
      createdBy: admin._id
    });

    await Schedule.create({
      scheduleCode: await Schedule.generateCode(),
      trainer: trainer2._id,
      title: 'Personal Training',
      subject: 'Personal Training',
      date: tomorrow,
      startTime: '15:00',
      endTime: '16:00',
      location: 'Khu PT ri√™ng',
      maxStudents: 1,
      description: 'Bu·ªïi PT 1-1',
      status: 'scheduled',
      createdBy: admin._id
    });

    // L·ªãch ƒë√£ ho√†n th√†nh (h√¥m qua)
    const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);
    
    const completedSchedule = await Schedule.create({
      scheduleCode: 'SCH' + yesterday.toISOString().split('T')[0].replace(/-/g, '') + '001',
      trainer: trainer1._id,
      title: 'L·ªõp Yoga ƒë√£ ho√†n th√†nh',
      subject: 'Yoga',
      date: yesterday,
      startTime: '08:00',
      endTime: '09:30',
      location: 'Ph√≤ng Yoga 1',
      maxStudents: 20,
      status: 'completed',
      checkIn: {
        time: new Date(yesterday.setHours(8, 5, 0, 0)),
        notes: 'ƒê√£ s·∫µn s√†ng',
        location: 'Ph√≤ng Yoga 1'
      },
      checkOut: {
        time: new Date(yesterday.setHours(9, 35, 0, 0)),
        notes: 'Bu·ªïi h·ªçc r·∫•t t·ªët',
        actualStudents: 18
      },
      actualDuration: 90,
      plannedDuration: 90,
      payment: {
        amount: 300000,
        isPaid: false
      },
      createdBy: admin._id
    });

    console.log('‚úÖ ƒê√£ t·∫°o 6 schedules\n');

    // ==================== TH·ªêNG K√ä ====================
    console.log('üìä TH·ªêNG K√ä D·ªÆ LI·ªÜU');
    console.log('='.repeat(50));
    console.log(`üë• Users: ${await User.countDocuments()}`);
    console.log(`   - Admin: ${await User.countDocuments({ role: 'admin' })}`);
    console.log(`   - Manager: ${await User.countDocuments({ role: 'manager' })}`);
    console.log(`   - User: ${await User.countDocuments({ role: 'user' })}`);
    console.log('');
    console.log(`ü§ù Partners: ${await Partner.countDocuments()}`);
    console.log(`   - Client: ${await Partner.countDocuments({ type: 'client' })}`);
    console.log(`   - Supplier: ${await Partner.countDocuments({ type: 'supplier' })}`);
    console.log(`   - Partner: ${await Partner.countDocuments({ type: 'partner' })}`);
    console.log('');
    console.log(`üìÑ Contracts: ${await Contract.countDocuments()}`);
    console.log(`   - Active: ${await Contract.countDocuments({ status: 'active' })}`);
    console.log(`   - Completed: ${await Contract.countDocuments({ status: 'completed' })}`);
    console.log(`   - Pending: ${await Contract.countDocuments({ status: 'pending' })}`);
    console.log('');
    console.log(`üèãÔ∏è Trainers: ${await Trainer.countDocuments()}`);
    console.log(`   - Active: ${await Trainer.countDocuments({ status: 'active' })}`);
    console.log('');
    console.log(`üìÖ Schedules: ${await Schedule.countDocuments()}`);
    console.log(`   - Scheduled: ${await Schedule.countDocuments({ status: 'scheduled' })}`);
    console.log(`   - Completed: ${await Schedule.countDocuments({ status: 'completed' })}`);
    console.log('='.repeat(50));
    console.log('');

    // ==================== TH√îNG TIN ƒêƒÇNG NH·∫¨P ====================
    console.log('üîë TH√îNG TIN ƒêƒÇNG NH·∫¨P');
    console.log('='.repeat(50));
    console.log('üìß Admin:');
    console.log('   Email: admin@example.com');
    console.log('   Password: 123456');
    console.log('   Role: Admin (Qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng)');
    console.log('');
    console.log('üìß Manager (c≈©ng l√† Trainer):');
    console.log('   Email: manager@example.com');
    console.log('   Password: 123456');
    console.log('   Role: Manager + Trainer');
    console.log('   Hourly Rate: 250,000 VND');
    console.log('');
    console.log('üìß User (c≈©ng l√† Trainer):');
    console.log('   Email: user@example.com');
    console.log('   Password: 123456');
    console.log('   Role: User + Trainer');
    console.log('   Hourly Rate: 200,000 VND');
    console.log('='.repeat(50));
    console.log('');
    console.log('üí° H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:');
    console.log('1. ƒêƒÉng nh·∫≠p b·∫±ng user@example.com');
    console.log('2. V√†o /api/schedules/my-today ƒë·ªÉ xem l·ªãch h√¥m nay');
    console.log('3. Check-in ca d·∫°y b·∫±ng POST /api/schedules/:id/check-in');
    console.log('4. Check-out ca d·∫°y b·∫±ng POST /api/schedules/:id/check-out');
    console.log('5. Xem th·ªëng k√™ t·∫°i /api/schedules/my-stats');
    console.log('');(50);
    console.log('');

    console.log('‚úÖ Seed data ho√†n t·∫•t!');
    console.log('üöÄ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:');
    console.log('   - ƒêƒÉng nh·∫≠p v√† qu·∫£n l√Ω h·ª£p ƒë·ªìng');
    console.log('   - Qu·∫£n l√Ω l·ªãch d·∫°y c·ªßa hu·∫•n luy·ªán vi√™n');
    console.log('   - Check-in/Check-out ca d·∫°y');
    console.log('   - Xem th·ªëng k√™ chi ti·∫øt');
    console.log('');
    console.log('üìö Xem th√™m t√†i li·ªáu t·∫°i README.md');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói khi seed data:', error);
    process.exit(1);
  }
};

// Ch·∫°y seed
seedData();